name: AWS deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  DJANGO_ENVIRONMENT: DEVELOPMENT

jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python ./pip/pip-install.py --python=python --pip=pip
      - uses: pre-commit/action@v3.0.0

  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub image
        image: postgres:12.13
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: aiarena
          POSTGRES_USER: aiarena
          POSTGRES_DATABASE: test_aiarena
          POSTGRES_ROOT_PASSWORD: aiarena
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: shogo82148/actions-setup-redis@v1
        with:
          redis-version: '6.x'
      - run: redis-cli ping
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python ./pip/pip-install.py --python=python --pip=pip
      - name: Grant aiarena user full access
        env:
          PORT: ${{ job.services.postgres.ports[5432] }}
        run: |
          PGPASSWORD="aiarena" psql -Uaiarena --host="127.0.0.1" --port "$PORT" -c "GRANT ALL PRIVILEGES ON DATABASE aiarena TO aiarena;";
      - name: Run Tests
        env:
          NOFAKE_REDIS: 1
        run: |
          python manage.py test --noinput

  prepare-images:
    name: Build and push production image to ECR
    runs-on: ubuntu-latest
    outputs:
      status_message_id: ${{ steps.slack.outputs.message_id }}
      images: ${{ steps.prepare_images.outputs.images }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::315513665747:role/aiarena-DeployRole-NUZWXPWHC0MZ
          aws-region: eu-central-1

      - name: Confirm AWS identity
        run: aws sts get-caller-identity

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r ./pip/requirements.LOCAL.txt

      - name: Prepare image
        id: prepare_images
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          MAINTENANCE_MODE: ${{ vars.MAINTENANCE_MODE }}
        run: ./run.py prepare-images

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [ linters, tests, prepare-images ]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install -r ./pip/requirements.LOCAL.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::315513665747:role/aiarena-DeployRole-NUZWXPWHC0MZ
          aws-region: eu-central-1

      - name: Deploy
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          PREPARED_IMAGES: ${{ needs.prepare-images.outputs.images }}
          MAINTENANCE_MODE: ${{ vars.MAINTENANCE_MODE }}
        run: ./run.py ecs

      - name: Monitor deployment
        run: ./run.py monitor-ecs
