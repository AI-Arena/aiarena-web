type Query {
  viewer: UserType
  competitions(offset: Int, before: String, after: String, first: Int, last: Int, status: CoreCompetitionStatusChoices): CompetitionTypeConnection
  bots(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
    name: String

    """Ordering"""
    orderBy: String
  ): BotTypeConnection
  news(offset: Int, before: String, after: String, first: Int, last: Int): NewsTypeConnection
  competition(id: ID!): CompetitionType
}

type UserType implements Node {
  """The ID of the object"""
  id: ID!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  dateJoined: DateTime!
  email: String!
  patreonLevel: CoreUserPatreonLevelChoices
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""An enumeration."""
enum CoreUserPatreonLevelChoices {
  """None"""
  NONE

  """Bronze"""
  BRONZE

  """Silver"""
  SILVER

  """Gold"""
  GOLD

  """Platinum"""
  PLATINUM

  """Diamond"""
  DIAMOND
}

type CompetitionTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CompetitionTypeEdge]!

  """Number of items in the queryset."""
  totalCount: Int!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `CompetitionType` and its cursor."""
type CompetitionTypeEdge {
  """The item at the end of the edge"""
  node: CompetitionType

  """A cursor for use in pagination"""
  cursor: String!
}

type CompetitionType implements Node {
  name: String!
  type: CoreCompetitionTypeChoices!
  dateCreated: DateTime!
  dateOpened: DateTime
  dateClosed: DateTime
  status: CoreCompetitionStatusChoices

  """The ID of the object"""
  id: ID!
  url: String
  participants(offset: Int, before: String, after: String, first: Int, last: Int): CompetitionParticipationTypeConnection
}

"""An enumeration."""
enum CoreCompetitionTypeChoices {
  """League - Round Robin"""
  L
}

"""An enumeration."""
enum CoreCompetitionStatusChoices {
  """Created"""
  CREATED

  """Frozen"""
  FROZEN

  """Paused"""
  PAUSED

  """Open"""
  OPEN

  """Closing"""
  CLOSING

  """Closed"""
  CLOSED
}

type CompetitionParticipationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CompetitionParticipationTypeEdge]!
}

"""
A Relay edge containing a `CompetitionParticipationType` and its cursor.
"""
type CompetitionParticipationTypeEdge {
  """The item at the end of the edge"""
  node: CompetitionParticipationType

  """A cursor for use in pagination"""
  cursor: String!
}

type CompetitionParticipationType implements Node {
  bot: BotType!
  elo: Int!
  divisionNum: Int!

  """The ID of the object"""
  id: ID!
  trend: Int
}

type BotType implements Node {
  user: UserType!
  name: String!
  created: DateTime!
  botZipUpdated: DateTime!
  botDataEnabled: Boolean!
  botDataPubliclyDownloadable: Boolean!
  type: CoreBotTypeChoices!

  """The ID of the object"""
  id: ID!
  url: String
}

"""An enumeration."""
enum CoreBotTypeChoices {
  """cppwin32"""
  CPPWIN32

  """cpplinux"""
  CPPLINUX

  """dotnetcore"""
  DOTNETCORE

  """java"""
  JAVA

  """nodejs"""
  NODEJS

  """python"""
  PYTHON
}

type BotTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BotTypeEdge]!

  """Number of items in the queryset."""
  totalCount: Int!
}

"""A Relay edge containing a `BotType` and its cursor."""
type BotTypeEdge {
  """The item at the end of the edge"""
  node: BotType

  """A cursor for use in pagination"""
  cursor: String!
}

type NewsTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [NewsTypeEdge]!

  """Number of items in the queryset."""
  totalCount: Int!
}

"""A Relay edge containing a `NewsType` and its cursor."""
type NewsTypeEdge {
  """The item at the end of the edge"""
  node: NewsType

  """A cursor for use in pagination"""
  cursor: String!
}

type NewsType implements Node {
  created: DateTime!
  title: String
  text: String!
  ytLink: String

  """The ID of the object"""
  id: ID!
}

type Mutation {
  passwordSignIn(input: PasswordSignInInput!): PasswordSignIn
  signOut: SignOut
}

type PasswordSignIn {
  errors: [ErrorType]
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input PasswordSignInInput {
  username: String
  password: String
}

type SignOut {
  errors: [ErrorType]
}